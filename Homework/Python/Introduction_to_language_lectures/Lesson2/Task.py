# list_1 = []
# list_1 = list()
# list_1 = [1, 2, 3, 8]
# print(*list_1)


# for i in list_1:
#     print(i)
    
# print(len(list_1))
# print(list_1[2])

# list_1 = []
# for i in range(5):
#     list_1.append(i)
# print(list_1)
    
# # удаление последнего элемента списка и возвращает его
# list_1 = [1, 2, 3, 8]
# print(list_1.pop())

# # Удаление конкретного элемента из списка (в скобках позиция элемента)
# list_1 = [1, 2, 3, 8]
# list_1.pop(1)
# print(list_1)

# # Добавление элемент на нужную позицию
# list_1 = [1, 2, 3, 8]
# list_1.insert(2, 11)
# print(list_1)

# # кортежи - неизменяемые списки
# t = ()
# print(type(t))

# t = (1, ) # обязательно оставить запятую
# print(type(t))

# v = [1, 4, 5]
# print(v)
# print(type(v))

# v = tuple(v)
# print(type(v))

# a, b, c = v
# print(a, b, c) # распаковка кортежа по элементно



# # словари - неупорядоченные коллекции произвольныз объектов с доступом по ключу.
# d = {}
# d = dict()
# d['q'] = 'qwerty' # q - ключ, остальное значение
# print(d)

# d['w'] = 'werty'
# print(d['w'])

# dictionary = {}
# dictionary = {'up': 'вверх', 'down': 'вниз'}
# print(dictionary['down'])

# dictionary['down'] = 'дно' # заменить значение ключа
# print(dictionary['down'])

# del dictionary['up']   # удаление ключа

# for item in dictionary:  # for (k, v) in dictionary.item():
#     print('{}: {}'.format(item, dictionary[item]))  # вывод ключа и значения



# # множества - он содержит в себе уникальные элементы, не обязательно упорядоченные
# colors = {'green', 'red', 'blue'}
# print(colors)

# colors.add('red') # не добавит потому что только уникальные значения
# print(colors)

# colors.add('grey') # добавит цвет
# print(colors)

# colors.remove('red')  # удалит цвет
# print(colors)

# colors.discard('red')  # тоже удаляет. Но сначало смотрит есть ли такое значение, и если нет то просто выводит множество
# print(colors)

# colors.clear()  # очистит польностью множество и выведет set()
# print(colors)

# # Операции со множествами
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}

# c = a.copy()  # копирование множества в переменную с

# u = a.union(b)  # объединение 2-х множеств с уникальными значениями

# i = a.intersection(b)  # пересечение множеств - выводит те элементы которые есть в обоих множествах

# dl = a.difference(b)  # разность множеств - вычитаем из множества А значения множества Б. Те что совпадают, убираются и выводятся те что остались

# dr = b.difference(a)  # разность множеств - вычитаем из множества Б значения множества А. Те что совпадают, убираются и выводятся те что остались

# q = a.union(b).difference(a.intersection(b)) # сначало делаем то что в скобках, потом делаем то что в начале, потом то что в середине

# # мы можем заморозить множество
# a = {1, 8, 6}

# b = frozenset(a) # это тоже самое множество, но только его нельзя изменять. Использовать, если точно знаем что нам не нужно менять множество
# print(b)


# Генератор списков
# list_1 = [exp for item in range(5)] # мы 5 раз будем добавлять значение exp

# list_1 = []
# for i in range(1, 6):
#     list_1.append(i)
# print(list_1)

# list_1 = [i for i in range(1, 6)]

# Генератор по заданному условию
# list_1 = [exp for item in range(5) if exp > 10] # мы 5 раз будем добавлять значение exp, если оно больше 10

# list_1 = [i for i in range(1, 21) if not i % 2] # добавляет в список те элементы которые делятся на 2 нацело
# print(list_1)

list_1 = [(i, i) for i in range(1, 11) if not i % 2] # добавляет в список те элементы которые делятся на 2 нацело и создаёт пару
print(list_1)

# Можно умножать, делить, вычитать, складывать и т.д.
list_1 = [i * 2 for i in range(10) if not i % 2] # добавляет в список те элементы которые делятся на 2 нацело, и умножает на 2 
print(list_1)


# ВИДЫ ОШИБОК

# SyntaxError(Синтаксическая ошибка) - это когда отсутствует знак
# IndentationError(Ошибка отступов) - это когда отсутствует отступ
# TypeError(Типовая ошибка) - это когда нельзя делать операции с разными типами данных. Например сложение строки и числа
# ZeroDivisionError(Деление на 0) - Делить на ноль нельзя
# KeyError(Ошибка ключа) - Это когда неверно указан ключ в словаре
# NameError(Ошибка имени переменной) - например когда переменная с таким именем отсутствует
# ValueError(Ошибка значения) - Например. Когда символы нельзя перевести в целые значения